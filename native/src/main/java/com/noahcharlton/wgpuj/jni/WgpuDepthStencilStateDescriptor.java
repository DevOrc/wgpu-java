package com.noahcharlton.wgpuj.jni;

import com.noahcharlton.wgpuj.util.WgpuJavaStruct;
import jnr.ffi.Runtime;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WgpuDepthStencilStateDescriptor extends WgpuJavaStruct {

    private final Enum<WgpuTextureFormat> format = new Enum<>(WgpuTextureFormat.class);
    private final Boolean depthWriteEnabled = new Boolean();
    private final Enum<WgpuCompareFunction> depthCompare = new Enum<>(WgpuCompareFunction.class);
    private final WgpuStencilStateFaceDescriptor stencilFront = inner(WgpuStencilStateFaceDescriptor.createHeap());
    private final WgpuStencilStateFaceDescriptor stencilBack = inner(WgpuStencilStateFaceDescriptor.createHeap());
    private final Unsigned32 stencilReadMask = new Unsigned32();
    private final Unsigned32 stencilWriteMask = new Unsigned32();

    private WgpuDepthStencilStateDescriptor(){}

    @Deprecated
    public WgpuDepthStencilStateDescriptor(Runtime runtime){
        super(runtime);
    }

    public static WgpuDepthStencilStateDescriptor createHeap(){
        return new WgpuDepthStencilStateDescriptor();
    }

    public static WgpuDepthStencilStateDescriptor createDirect(){
        var struct = new WgpuDepthStencilStateDescriptor();
        struct.useDirectMemory();
        return struct;
    }


    public WgpuTextureFormat getFormat(){
        return format.get();
    }

    public void setFormat(WgpuTextureFormat x){
        this.format.set(x);
    }

    public boolean getDepthWriteEnabled(){
        return depthWriteEnabled.get();
    }

    public void setDepthWriteEnabled(boolean x){
        this.depthWriteEnabled.set(x);
    }

    public WgpuCompareFunction getDepthCompare(){
        return depthCompare.get();
    }

    public void setDepthCompare(WgpuCompareFunction x){
        this.depthCompare.set(x);
    }

    public WgpuStencilStateFaceDescriptor getStencilFront(){
        return stencilFront;
    }

    public WgpuStencilStateFaceDescriptor getStencilBack(){
        return stencilBack;
    }

    public long getStencilReadMask(){
        return stencilReadMask.get();
    }

    public void setStencilReadMask(long x){
        this.stencilReadMask.set(x);
    }

    public long getStencilWriteMask(){
        return stencilWriteMask.get();
    }

    public void setStencilWriteMask(long x){
        this.stencilWriteMask.set(x);
    }

}