package com.noahcharlton.wgpuj.jni;

import com.noahcharlton.wgpuj.WgpuJava;
import com.noahcharlton.wgpuj.util.WgpuJavaStruct;
import jnr.ffi.Runtime;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WgpuRenderPipelineDescriptor extends WgpuJavaStruct {

    private final Unsigned64 layout = new Unsigned64();
    private final WgpuProgrammableStageDescriptor vertexStage = inner(WgpuProgrammableStageDescriptor.createHeap());
    private final StructRef<WgpuProgrammableStageDescriptor> fragmentStage = new StructRef<>(WgpuProgrammableStageDescriptor.class);
    private final Enum<WgpuPrimitiveTopology> primitiveTopology = new Enum<>(WgpuPrimitiveTopology.class);
    private final StructRef<WgpuRasterizationStateDescriptor> rasterizationState = new StructRef<>(WgpuRasterizationStateDescriptor.class);
    private final StructRef<WgpuColorStateDescriptor> colorStates = new StructRef<>(WgpuColorStateDescriptor.class);
    private final Unsigned64 colorStatesLength = new Unsigned64();
    private final StructRef<WgpuDepthStencilStateDescriptor> depthStencilState = new StructRef<>(WgpuDepthStencilStateDescriptor.class);
    private final WgpuVertexStateDescriptor vertexState = inner(WgpuVertexStateDescriptor.createHeap());
    private final Unsigned32 sampleCount = new Unsigned32();
    private final Unsigned32 sampleMask = new Unsigned32();
    private final Boolean alphaToCoverageEnabled = new Boolean();

    private WgpuRenderPipelineDescriptor(){}

    @Deprecated
    public WgpuRenderPipelineDescriptor(Runtime runtime){
        super(runtime);
    }

    public static WgpuRenderPipelineDescriptor createHeap(){
        return new WgpuRenderPipelineDescriptor();
    }

    public static WgpuRenderPipelineDescriptor createDirect(){
        var struct = new WgpuRenderPipelineDescriptor();
        struct.useDirectMemory();
        return struct;
    }


    public long getLayout(){
        return layout.get();
    }

    public void setLayout(long x){
        this.layout.set(x);
    }

    public WgpuProgrammableStageDescriptor getVertexStage(){
        return vertexStage;
    }

    public StructRef<WgpuProgrammableStageDescriptor> getFragmentStage(){
        return fragmentStage;
    }

    public void setFragmentStage(WgpuProgrammableStageDescriptor... x){
        if(x.length == 0 || x[0] == null){
            this.fragmentStage.set(WgpuJava.createNullPointer());
        } else {
            this.fragmentStage.set(x);
        }
    }

    public WgpuPrimitiveTopology getPrimitiveTopology(){
        return primitiveTopology.get();
    }

    public void setPrimitiveTopology(WgpuPrimitiveTopology x){
        this.primitiveTopology.set(x);
    }

    public StructRef<WgpuRasterizationStateDescriptor> getRasterizationState(){
        return rasterizationState;
    }

    public void setRasterizationState(WgpuRasterizationStateDescriptor... x){
        if(x.length == 0 || x[0] == null){
            this.rasterizationState.set(WgpuJava.createNullPointer());
        } else {
            this.rasterizationState.set(x);
        }
    }

    public StructRef<WgpuColorStateDescriptor> getColorStates(){
        return colorStates;
    }

    public void setColorStates(WgpuColorStateDescriptor... x){
        if(x.length == 0 || x[0] == null){
            this.colorStates.set(WgpuJava.createNullPointer());
        } else {
            this.colorStates.set(x);
        }
    }

    public long getColorStatesLength(){
        return colorStatesLength.get();
    }

    public void setColorStatesLength(long x){
        this.colorStatesLength.set(x);
    }

    public StructRef<WgpuDepthStencilStateDescriptor> getDepthStencilState(){
        return depthStencilState;
    }

    public void setDepthStencilState(WgpuDepthStencilStateDescriptor... x){
        if(x.length == 0 || x[0] == null){
            this.depthStencilState.set(WgpuJava.createNullPointer());
        } else {
            this.depthStencilState.set(x);
        }
    }

    public WgpuVertexStateDescriptor getVertexState(){
        return vertexState;
    }

    public long getSampleCount(){
        return sampleCount.get();
    }

    public void setSampleCount(long x){
        this.sampleCount.set(x);
    }

    public long getSampleMask(){
        return sampleMask.get();
    }

    public void setSampleMask(long x){
        this.sampleMask.set(x);
    }

    public boolean getAlphaToCoverageEnabled(){
        return alphaToCoverageEnabled.get();
    }

    public void setAlphaToCoverageEnabled(boolean x){
        this.alphaToCoverageEnabled.set(x);
    }

}